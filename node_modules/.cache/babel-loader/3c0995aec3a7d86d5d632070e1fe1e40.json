{"ast":null,"code":"import { ADD_NEWONE_TASK } from \"../constants\";\nimport { TOGGLE_ITEM_TASK } from \"../constants\";\nimport { EDIT_ITEM_TASK } from \"../constants\";\nimport { DELET_ITEM_TASK } from \"../constants\";\nimport { SELECT_ALL_ITEMS_TASK } from \"../constants\";\nimport { DELETE_SELECTED_ITEMS_TASK } from \"../constants\";\n\nconst todoList = (state = localStorage.getItem(\"STORE\") ? JSON.parse(localStorage.getItem(\"STORE\") || \"\") : [], actions) => {\n  switch (actions.type) {\n    case ADD_NEWONE_TASK:\n      return [...state, {\n        id: actions.id,\n        payload: actions.payload,\n        completed: actions.completed\n      }];\n\n    case TOGGLE_ITEM_TASK:\n      return state.map(todo => todo.id === actions.id ? { ...todo,\n        completed: !todo.completed\n      } : todo);\n\n    case EDIT_ITEM_TASK:\n      return state.map(todo => todo.id === actions.id ? { ...todo,\n        payload: actions.payload\n      } : todo);\n\n    case DELET_ITEM_TASK:\n      return state.filter(todo => {\n        return todo.id !== actions.id;\n      });\n\n    case SELECT_ALL_ITEMS_TASK:\n      const areAllMarked = state.some(todo => todo.completed);\n      return state.map(todo => ({ ...todo,\n        completed: !areAllMarked\n      }));\n\n    case DELETE_SELECTED_ITEMS_TASK:\n      return state.filter(todo => todo.completed === false);\n\n    default:\n      return state;\n  }\n};\n\nexport default todoList;","map":{"version":3,"sources":["/home/dell304/Selieznov/todo React/react_typescript/src/reducers/todo.ts"],"names":["ADD_NEWONE_TASK","TOGGLE_ITEM_TASK","EDIT_ITEM_TASK","DELET_ITEM_TASK","SELECT_ALL_ITEMS_TASK","DELETE_SELECTED_ITEMS_TASK","todoList","state","localStorage","getItem","JSON","parse","actions","type","id","payload","completed","map","todo","filter","areAllMarked","some"],"mappings":"AAAA,SAASA,eAAT,QAAgC,cAAhC;AACA,SAASC,gBAAT,QAAiC,cAAjC;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,SAASC,qBAAT,QAAsC,cAAtC;AACA,SAASC,0BAAT,QAA2C,cAA3C;;AAEA,MAAMC,QAAQ,GAAG,CACfC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,IACJC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,OAArB,KAAiC,EAA5C,CADI,GAEJ,EAHW,EAIfG,OAJe,KAKZ;AACH,UAAQA,OAAO,CAACC,IAAhB;AACE,SAAKb,eAAL;AACE,aAAO,CACL,GAAGO,KADE,EAEL;AACEO,QAAAA,EAAE,EAAEF,OAAO,CAACE,EADd;AAEEC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OAFnB;AAGEC,QAAAA,SAAS,EAAEJ,OAAO,CAACI;AAHrB,OAFK,CAAP;;AASF,SAAKf,gBAAL;AACE,aAAOM,KAAK,CAACU,GAAN,CAAWC,IAAD,IACfA,IAAI,CAACJ,EAAL,KAAYF,OAAO,CAACE,EAApB,GAAyB,EAAE,GAAGI,IAAL;AAAWF,QAAAA,SAAS,EAAE,CAACE,IAAI,CAACF;AAA5B,OAAzB,GAAmEE,IAD9D,CAAP;;AAIF,SAAKhB,cAAL;AACE,aAAOK,KAAK,CAACU,GAAN,CAAWC,IAAD,IACfA,IAAI,CAACJ,EAAL,KAAYF,OAAO,CAACE,EAApB,GAAyB,EAAE,GAAGI,IAAL;AAAWH,QAAAA,OAAO,EAAEH,OAAO,CAACG;AAA5B,OAAzB,GAAiEG,IAD5D,CAAP;;AAIF,SAAKf,eAAL;AACE,aAAOI,KAAK,CAACY,MAAN,CAAcD,IAAD,IAAe;AACjC,eAAOA,IAAI,CAACJ,EAAL,KAAYF,OAAO,CAACE,EAA3B;AACD,OAFM,CAAP;;AAIF,SAAKV,qBAAL;AACE,YAAMgB,YAAY,GAAGb,KAAK,CAACc,IAAN,CAAYH,IAAD,IAAeA,IAAI,CAACF,SAA/B,CAArB;AACA,aAAOT,KAAK,CAACU,GAAN,CAAWC,IAAD,KAAgB,EAC/B,GAAGA,IAD4B;AAE/BF,QAAAA,SAAS,EAAE,CAACI;AAFmB,OAAhB,CAAV,CAAP;;AAKF,SAAKf,0BAAL;AACE,aAAOE,KAAK,CAACY,MAAN,CAAcD,IAAD,IAAeA,IAAI,CAACF,SAAL,KAAmB,KAA/C,CAAP;;AAEF;AACE,aAAOT,KAAP;AArCJ;AAuCD,CA7CD;;AA+CA,eAAeD,QAAf","sourcesContent":["import { ADD_NEWONE_TASK } from \"../constants\";\nimport { TOGGLE_ITEM_TASK } from \"../constants\";\nimport { EDIT_ITEM_TASK } from \"../constants\";\nimport { DELET_ITEM_TASK } from \"../constants\";\nimport { SELECT_ALL_ITEMS_TASK } from \"../constants\";\nimport { DELETE_SELECTED_ITEMS_TASK } from \"../constants\";\n\nconst todoList = (\n  state = localStorage.getItem(\"STORE\")\n    ? JSON.parse(localStorage.getItem(\"STORE\") || \"\")\n    : [],\n  actions: any\n) => {\n  switch (actions.type) {\n    case ADD_NEWONE_TASK:\n      return [\n        ...state,\n        {\n          id: actions.id,\n          payload: actions.payload,\n          completed: actions.completed,\n        },\n      ];\n\n    case TOGGLE_ITEM_TASK:\n      return state.map((todo: any) =>\n        todo.id === actions.id ? { ...todo, completed: !todo.completed } : todo\n      );\n\n    case EDIT_ITEM_TASK:\n      return state.map((todo: any) =>\n        todo.id === actions.id ? { ...todo, payload: actions.payload } : todo\n      );\n\n    case DELET_ITEM_TASK:\n      return state.filter((todo: any) => {\n        return todo.id !== actions.id;\n      });\n\n    case SELECT_ALL_ITEMS_TASK:\n      const areAllMarked = state.some((todo: any) => todo.completed);\n      return state.map((todo: any) => ({\n        ...todo,\n        completed: !areAllMarked,\n      }));\n\n    case DELETE_SELECTED_ITEMS_TASK:\n      return state.filter((todo: any) => todo.completed === false);\n\n    default:\n      return state;\n  }\n};\n\nexport default todoList;\n"]},"metadata":{},"sourceType":"module"}