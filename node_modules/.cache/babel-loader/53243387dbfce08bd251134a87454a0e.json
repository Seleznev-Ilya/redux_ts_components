{"ast":null,"code":"import { ADD_NEWONE_TASK } from \"../constants\";\nimport { TOGGLE_ITEM_TASK } from \"../constants\";\nimport { EDIT_ITEM_TASK } from \"../constants\";\nimport { DELET_ITEM_TASK } from \"../constants\";\nimport { SELECT_ALL_ITEMS_TASK } from \"../constants\";\n\nconst todoList = (state = [], actions) => {\n  switch (actions.type) {\n    case ADD_NEWONE_TASK:\n      return [...state, {\n        id: actions.id,\n        payload: actions.payload,\n        completed: actions.completed\n      }];\n\n    case TOGGLE_ITEM_TASK:\n      return state.map(todo => todo.id === actions.id ? { ...todo,\n        completed: !todo.completed\n      } : todo);\n\n    case EDIT_ITEM_TASK:\n      return state.map(todo => todo.id === actions.id ? { ...todo,\n        payload: actions.payload\n      } : todo);\n\n    case DELET_ITEM_TASK:\n      return state.filter(todo => {\n        return todo.id !== actions.id;\n      });\n\n    case SELECT_ALL_ITEMS_TASK:\n      const isAnyCheckFalse = state.find(item => item.completed === false);\n\n      if (isAnyCheckFalse) {\n        return state.map(item => {\n          item.completed = true;\n        });\n      } else {\n        return state.map(item => {\n          item.completed = false;\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default todoList;","map":{"version":3,"sources":["/home/dell304/Selieznov/todo React/react_typescript/src/reducers/todo.ts"],"names":["ADD_NEWONE_TASK","TOGGLE_ITEM_TASK","EDIT_ITEM_TASK","DELET_ITEM_TASK","SELECT_ALL_ITEMS_TASK","todoList","state","actions","type","id","payload","completed","map","todo","filter","isAnyCheckFalse","find","item"],"mappings":"AAAA,SAASA,eAAT,QAAgC,cAAhC;AACA,SAASC,gBAAT,QAAiC,cAAjC;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,SAASC,qBAAT,QAAsC,cAAtC;;AAEA,MAAMC,QAAQ,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,OAAb,KAA8B;AAC7C,UAAQA,OAAO,CAACC,IAAhB;AACE,SAAKR,eAAL;AACE,aAAO,CACL,GAAGM,KADE,EAEL;AACEG,QAAAA,EAAE,EAAEF,OAAO,CAACE,EADd;AAEEC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OAFnB;AAGEC,QAAAA,SAAS,EAAEJ,OAAO,CAACI;AAHrB,OAFK,CAAP;;AASF,SAAKV,gBAAL;AACE,aAAOK,KAAK,CAACM,GAAN,CAAWC,IAAD,IACfA,IAAI,CAACJ,EAAL,KAAYF,OAAO,CAACE,EAApB,GAAyB,EAAE,GAAGI,IAAL;AAAWF,QAAAA,SAAS,EAAE,CAACE,IAAI,CAACF;AAA5B,OAAzB,GAAmEE,IAD9D,CAAP;;AAIF,SAAKX,cAAL;AACE,aAAOI,KAAK,CAACM,GAAN,CAAWC,IAAD,IACfA,IAAI,CAACJ,EAAL,KAAYF,OAAO,CAACE,EAApB,GAAyB,EAAE,GAAGI,IAAL;AAAWH,QAAAA,OAAO,EAAEH,OAAO,CAACG;AAA5B,OAAzB,GAAiEG,IAD5D,CAAP;;AAIF,SAAKV,eAAL;AACE,aAAOG,KAAK,CAACQ,MAAN,CAAcD,IAAD,IAAe;AACjC,eAAOA,IAAI,CAACJ,EAAL,KAAYF,OAAO,CAACE,EAA3B;AACD,OAFM,CAAP;;AAIF,SAAKL,qBAAL;AACE,YAAMW,eAAe,GAAGT,KAAK,CAACU,IAAN,CACrBC,IAAD,IAAeA,IAAI,CAACN,SAAL,KAAmB,KADZ,CAAxB;;AAGA,UAAII,eAAJ,EAAqB;AACnB,eAAOT,KAAK,CAACM,GAAN,CAAWK,IAAD,IAAe;AAC9BA,UAAAA,IAAI,CAACN,SAAL,GAAiB,IAAjB;AACD,SAFM,CAAP;AAGD,OAJD,MAIO;AACL,eAAOL,KAAK,CAACM,GAAN,CAAWK,IAAD,IAAe;AAC9BA,UAAAA,IAAI,CAACN,SAAL,GAAiB,KAAjB;AACD,SAFM,CAAP;AAGD;;AAEH;AACE,aAAOL,KAAP;AAzCJ;AA2CD,CA5CD;;AA8CA,eAAeD,QAAf","sourcesContent":["import { ADD_NEWONE_TASK } from \"../constants\";\nimport { TOGGLE_ITEM_TASK } from \"../constants\";\nimport { EDIT_ITEM_TASK } from \"../constants\";\nimport { DELET_ITEM_TASK } from \"../constants\";\nimport { SELECT_ALL_ITEMS_TASK } from \"../constants\";\n\nconst todoList = (state = [], actions: any) => {\n  switch (actions.type) {\n    case ADD_NEWONE_TASK:\n      return [\n        ...state,\n        {\n          id: actions.id,\n          payload: actions.payload,\n          completed: actions.completed,\n        },\n      ];\n\n    case TOGGLE_ITEM_TASK:\n      return state.map((todo: any) =>\n        todo.id === actions.id ? { ...todo, completed: !todo.completed } : todo\n      );\n\n    case EDIT_ITEM_TASK:\n      return state.map((todo: any) =>\n        todo.id === actions.id ? { ...todo, payload: actions.payload } : todo\n      );\n\n    case DELET_ITEM_TASK:\n      return state.filter((todo: any) => {\n        return todo.id !== actions.id;\n      });\n\n    case SELECT_ALL_ITEMS_TASK:\n      const isAnyCheckFalse = state.find(\n        (item: any) => item.completed === false\n      );\n      if (isAnyCheckFalse) {\n        return state.map((item: any) => {\n          item.completed = true;\n        });\n      } else {\n        return state.map((item: any) => {\n          item.completed = false;\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default todoList;\n"]},"metadata":{},"sourceType":"module"}