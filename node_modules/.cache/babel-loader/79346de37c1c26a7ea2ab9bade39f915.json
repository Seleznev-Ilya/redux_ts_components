{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dell304/Selieznov/todo React/react_typescript/src/componenst/TextInput/index.tsx\",\n    _s = $RefreshSig$();\n\n// import React, { useCallback, memo } from \"react\";\n// import { useDispatch } from \"react-redux\";\n// interface Props {\n//   placeHolder: string;\n//   action: (...a: any) => { type: string; payload: string; id?: number };\n//   actionArguments?: {\n//     payload: string;\n//     id: number;\n//   };\n//   toggleTitleState?: () => void;\n//   deleteHendler?: () => any;\n// }\n// const Textinput = ({\n//   placeHolder,\n//   action,\n//   actionArguments,\n//   toggleTitleState,\n//   deleteHendler,\n// }: Props) => {\n//   const dispatch = useDispatch();\n//   let input: any;\n//   const initialvalu = actionArguments ? actionArguments.payload : \"\";\n//   const submitContent = useCallback((e) => {\n//     e.preventDefault();\n//     if (toggleTitleState) toggleTitleState();\n//     if (!input.value.trim()) {\n//       if (deleteHendler) deleteHendler();\n//       return;\n//     }\n//     actionArguments\n//       ? dispatch(action(input.value, actionArguments.id))\n//       : dispatch(action(input.value));\n//     input.value = \"\";\n//   }, []);\n//   return (\n//     <form onSubmit={submitContent}>\n//       <input\n//         placeholder={placeHolder}\n//         ref={(node) => {\n//           input = node;\n//           if (node) node.focus();\n//           if (node) node.value = initialvalu;\n//         }}\n//         onBlur={submitContent}\n//       ></input>\n//     </form>\n//   );\n// };\n// export default memo(Textinput);\nimport React from \"react\";\nimport { Form, Field } from \"react-final-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Input } from \"../Input\";\n\nconst Textinput = ({\n  placeHolder,\n  action,\n  actionArguments,\n  toggleTitleState,\n  deleteHendler\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const todoList = useSelector(store => store);\n\n  const handelOnSubmit = values => {\n    console.log(values.title);\n    console.log(todoList);\n    if (toggleTitleState) toggleTitleState();\n\n    if (Object.keys(values).length !== 0) {\n      if (deleteHendler) deleteHendler();\n      return;\n    }\n\n    actionArguments ? dispatch(action(values.title, actionArguments.id)) : dispatch(action(values.title));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handelOnSubmit,\n      render: ({\n        form,\n        values\n      }) => /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => (e.preventDefault(e), Object.keys(values).length !== 0 && handelOnSubmit(values), form.reset(), form),\n        children: /*#__PURE__*/_jsxDEV(Field, {\n          name: \"title\",\n          component: Input,\n          placeholder: placeHolder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n/* (\n  <Form\n    onSubmit={onSubmit}\n    render={({ handleSubmit }) => (\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>First Name</label>\n          <Field<string>\n            name=\"firstName\"\n            component={TextInput}\n            placeholder=\"First Name\"\n          />\n        </div>\n      </form>\n    )}\n  />\n); */\n\n\n_s(Textinput, \"wcGSk8dKR/VzrmXBu/25zCEuul8=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Textinput;\nexport default Textinput;\n\nvar _c;\n\n$RefreshReg$(_c, \"Textinput\");","map":{"version":3,"sources":["/home/dell304/Selieznov/todo React/react_typescript/src/componenst/TextInput/index.tsx"],"names":["React","Form","Field","useDispatch","useSelector","Input","Textinput","placeHolder","action","actionArguments","toggleTitleState","deleteHendler","dispatch","todoList","store","handelOnSubmit","values","console","log","title","Object","keys","length","id","form","e","preventDefault","reset"],"mappings":";;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,kBAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,KAAT,QAAsB,UAAtB;;AAaA,MAAMC,SAAS,GAAG,CAAC;AACjBC,EAAAA,WADiB;AAEjBC,EAAAA,MAFiB;AAGjBC,EAAAA,eAHiB;AAIjBC,EAAAA,gBAJiB;AAKjBC,EAAAA;AALiB,CAAD,KAML;AAAA;;AACX,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,QAAQ,GAAGT,WAAW,CAAEU,KAAD,IAAgBA,KAAjB,CAA5B;;AAEA,QAAMC,cAAc,GAAIC,MAAD,IAAiB;AACtCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,KAAnB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AAEA,QAAIH,gBAAJ,EAAsBA,gBAAgB;;AACtC,QAAIU,MAAM,CAACC,IAAP,CAAYL,MAAZ,EAAoBM,MAApB,KAA+B,CAAnC,EAAsC;AACpC,UAAIX,aAAJ,EAAmBA,aAAa;AAChC;AACD;;AACDF,IAAAA,eAAe,GACXG,QAAQ,CAACJ,MAAM,CAACQ,MAAM,CAACG,KAAR,EAAeV,eAAe,CAACc,EAA/B,CAAP,CADG,GAEXX,QAAQ,CAACJ,MAAM,CAACQ,MAAM,CAACG,KAAR,CAAP,CAFZ;AAGD,GAZD;;AAcA,sBACE;AAAA,2BACE,QAAC,IAAD;AACE,MAAA,QAAQ,EAAEJ,cADZ;AAEE,MAAA,MAAM,EAAE,CAAC;AAAES,QAAAA,IAAF;AAAQR,QAAAA;AAAR,OAAD,kBACN;AACE,QAAA,QAAQ,EAAGS,CAAD,KACRA,CAAC,CAACC,cAAF,CAAiBD,CAAjB,GACAL,MAAM,CAACC,IAAP,CAAYL,MAAZ,EAAoBM,MAApB,KAA+B,CAA/B,IAAoCP,cAAc,CAACC,MAAD,CADlD,EAEAQ,IAAI,CAACG,KAAL,EAFA,EAGAH,IAJQ,CADZ;AAAA,+BAQE,QAAC,KAAD;AACE,UAAA,IAAI,EAAC,OADP;AAEE,UAAA,SAAS,EAAEnB,KAFb;AAGE,UAAA,WAAW,EAAEE;AAHf;AAAA;AAAA;AAAA;AAAA;AARF;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CA/CD;AAgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAhEMD,S;UAOaH,W,EACAC,W;;;KARbE,S;AAiEN,eAAeA,SAAf","sourcesContent":["// import React, { useCallback, memo } from \"react\";\n// import { useDispatch } from \"react-redux\";\n\n// interface Props {\n//   placeHolder: string;\n//   action: (...a: any) => { type: string; payload: string; id?: number };\n//   actionArguments?: {\n//     payload: string;\n//     id: number;\n//   };\n//   toggleTitleState?: () => void;\n//   deleteHendler?: () => any;\n// }\n\n// const Textinput = ({\n//   placeHolder,\n//   action,\n//   actionArguments,\n//   toggleTitleState,\n//   deleteHendler,\n// }: Props) => {\n//   const dispatch = useDispatch();\n//   let input: any;\n//   const initialvalu = actionArguments ? actionArguments.payload : \"\";\n\n//   const submitContent = useCallback((e) => {\n//     e.preventDefault();\n//     if (toggleTitleState) toggleTitleState();\n//     if (!input.value.trim()) {\n//       if (deleteHendler) deleteHendler();\n//       return;\n//     }\n//     actionArguments\n//       ? dispatch(action(input.value, actionArguments.id))\n//       : dispatch(action(input.value));\n\n//     input.value = \"\";\n//   }, []);\n\n//   return (\n//     <form onSubmit={submitContent}>\n//       <input\n//         placeholder={placeHolder}\n//         ref={(node) => {\n//           input = node;\n//           if (node) node.focus();\n//           if (node) node.value = initialvalu;\n//         }}\n//         onBlur={submitContent}\n//       ></input>\n//     </form>\n//   );\n// };\n\n// export default memo(Textinput);\n\nimport React from \"react\";\nimport { Form, Field } from \"react-final-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Input } from \"../Input\";\n\ninterface Props {\n  placeHolder: string;\n  action: (...a: any) => { type: string; payload: string; id?: number };\n  actionArguments?: {\n    payload: string;\n    id: number;\n  };\n  toggleTitleState?: () => void;\n  deleteHendler?: () => any;\n}\n\nconst Textinput = ({\n  placeHolder,\n  action,\n  actionArguments,\n  toggleTitleState,\n  deleteHendler,\n}: Props) => {\n  const dispatch = useDispatch();\n  const todoList = useSelector((store: any) => store);\n\n  const handelOnSubmit = (values: any) => {\n    console.log(values.title);\n    console.log(todoList);\n\n    if (toggleTitleState) toggleTitleState();\n    if (Object.keys(values).length !== 0) {\n      if (deleteHendler) deleteHendler();\n      return;\n    }\n    actionArguments\n      ? dispatch(action(values.title, actionArguments.id))\n      : dispatch(action(values.title));\n  };\n\n  return (\n    <div>\n      <Form\n        onSubmit={handelOnSubmit}\n        render={({ form, values }) => (\n          <form\n            onSubmit={(e: any) => (\n              e.preventDefault(e),\n              Object.keys(values).length !== 0 && handelOnSubmit(values),\n              form.reset(),\n              form\n            )}\n          >\n            <Field<string>\n              name=\"title\"\n              component={Input}\n              placeholder={placeHolder}\n            />\n          </form>\n        )}\n      />\n    </div>\n  );\n};\n/* (\n  <Form\n    onSubmit={onSubmit}\n    render={({ handleSubmit }) => (\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>First Name</label>\n          <Field<string>\n            name=\"firstName\"\n            component={TextInput}\n            placeholder=\"First Name\"\n          />\n        </div>\n      </form>\n    )}\n  />\n); */\nexport default Textinput;\n"]},"metadata":{},"sourceType":"module"}