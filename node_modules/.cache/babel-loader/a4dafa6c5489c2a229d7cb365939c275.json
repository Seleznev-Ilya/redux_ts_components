{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dell304/Selieznov/todo React/react_typescript/src/componenst/TextInput/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, memo } from \"react\"; // import { connect } from \"react-redux\";\n\nimport { useDispatch } from \"react-redux\";\n\nconst Textinput = ({\n  // dispatch,\n  placeHolder,\n  action,\n  actionArguments,\n  toggleTitleState,\n  deleteHendler\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  let input;\n  const initialvalu = actionArguments ? actionArguments.payload : \"\";\n  const submitContent = useCallback(e => {\n    e.preventDefault();\n    if (toggleTitleState) toggleTitleState();\n\n    if (!input.value.trim()) {\n      if (deleteHendler) deleteHendler();\n      return;\n    }\n\n    actionArguments ? dispatch(action(input.value, actionArguments.id)) : dispatch(action(input.value));\n    input.value = \"\";\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitContent,\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: placeHolder,\n      ref: node => {\n        input = node;\n        if (node) node.focus();\n        if (node) node.value = initialvalu;\n      },\n      onBlur: submitContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}; // const Textinput = memo(InputMainComponent);\n// export default connect()(Textinput);\n\n\n_s(Textinput, \"LPPb4jjydgJ6StY1PWThymTBa/g=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Textinput;\nexport default _c2 = /*#__PURE__*/memo(Textinput);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Textinput\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/dell304/Selieznov/todo React/react_typescript/src/componenst/TextInput/index.tsx"],"names":["React","useCallback","memo","useDispatch","Textinput","placeHolder","action","actionArguments","toggleTitleState","deleteHendler","dispatch","input","initialvalu","payload","submitContent","e","preventDefault","value","trim","id","node","focus"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,IAA7B,QAAyC,OAAzC,C,CACA;;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAcA,MAAMC,SAAS,GAAG,CAAC;AACjB;AACAC,EAAAA,WAFiB;AAGjBC,EAAAA,MAHiB;AAIjBC,EAAAA,eAJiB;AAKjBC,EAAAA,gBALiB;AAMjBC,EAAAA;AANiB,CAAD,KAOL;AAAA;;AACX,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,MAAIQ,KAAJ;AACA,QAAMC,WAAW,GAAGL,eAAe,GAAGA,eAAe,CAACM,OAAnB,GAA6B,EAAhE;AAEA,QAAMC,aAAa,GAAGb,WAAW,CAAEc,CAAD,IAAO;AACvCA,IAAAA,CAAC,CAACC,cAAF;AACA,QAAIR,gBAAJ,EAAsBA,gBAAgB;;AACtC,QAAI,CAACG,KAAK,CAACM,KAAN,CAAYC,IAAZ,EAAL,EAAyB;AACvB,UAAIT,aAAJ,EAAmBA,aAAa;AAChC;AACD;;AACDF,IAAAA,eAAe,GACXG,QAAQ,CAACJ,MAAM,CAACK,KAAK,CAACM,KAAP,EAAcV,eAAe,CAACY,EAA9B,CAAP,CADG,GAEXT,QAAQ,CAACJ,MAAM,CAACK,KAAK,CAACM,KAAP,CAAP,CAFZ;AAIAN,IAAAA,KAAK,CAACM,KAAN,GAAc,EAAd;AACD,GAZgC,EAY9B,EAZ8B,CAAjC;AAcA,sBACE;AAAM,IAAA,QAAQ,EAAEH,aAAhB;AAAA,2BACE;AACE,MAAA,WAAW,EAAET,WADf;AAEE,MAAA,GAAG,EAAGe,IAAD,IAAU;AACbT,QAAAA,KAAK,GAAGS,IAAR;AACA,YAAIA,IAAJ,EAAUA,IAAI,CAACC,KAAL;AACV,YAAID,IAAJ,EAAUA,IAAI,CAACH,KAAL,GAAaL,WAAb;AACX,OANH;AAOE,MAAA,MAAM,EAAEE;AAPV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAvCD,C,CAwCA;AACA;;;GAzCMV,S;UAQaD,W;;;KARbC,S;AA0CN,kCAAeF,IAAI,CAACE,SAAD,CAAnB","sourcesContent":["import React, { useCallback, memo } from \"react\";\n// import { connect } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\n\ninterface Props {\n  // dispatch: any;\n  placeHolder: string;\n  action: (...a: any) => { type: string; payload: string; id?: number };\n  actionArguments?: {\n    payload: string;\n    id: number;\n  };\n  toggleTitleState?: () => void;\n  deleteHendler?: () => any;\n}\n\nconst Textinput = ({\n  // dispatch,\n  placeHolder,\n  action,\n  actionArguments,\n  toggleTitleState,\n  deleteHendler,\n}: Props) => {\n  const dispatch = useDispatch();\n  let input: any;\n  const initialvalu = actionArguments ? actionArguments.payload : \"\";\n\n  const submitContent = useCallback((e) => {\n    e.preventDefault();\n    if (toggleTitleState) toggleTitleState();\n    if (!input.value.trim()) {\n      if (deleteHendler) deleteHendler();\n      return;\n    }\n    actionArguments\n      ? dispatch(action(input.value, actionArguments.id))\n      : dispatch(action(input.value));\n\n    input.value = \"\";\n  }, []);\n\n  return (\n    <form onSubmit={submitContent}>\n      <input\n        placeholder={placeHolder}\n        ref={(node) => {\n          input = node;\n          if (node) node.focus();\n          if (node) node.value = initialvalu;\n        }}\n        onBlur={submitContent}\n      ></input>\n    </form>\n  );\n};\n// const Textinput = memo(InputMainComponent);\n// export default connect()(Textinput);\nexport default memo(Textinput);\n"]},"metadata":{},"sourceType":"module"}