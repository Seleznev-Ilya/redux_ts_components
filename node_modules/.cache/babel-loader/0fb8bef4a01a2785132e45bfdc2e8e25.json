{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/dell304/Selieznov/todo React/react_typescript/src/componenst/TextInput/index.tsx\";\nimport React, {\n/* useCallback, */\nmemo } from \"react\"; // import { useDispatch } from \"react-redux\";\n\nimport { Form, Field } from \"react-final-form\"; // interface Props {\n//   placeHolder: string;\n//   action: (...a: any) => { type: string; payload: string; id?: number };\n//   actionArguments?: {\n//     payload: string;\n//     id: number;\n//   };\n//   toggleTitleState?: () => void;\n//   deleteHendler?: () => any;\n// }\n// const Textinput = ({\n//   placeHolder,\n//   action,\n//   actionArguments,\n//   toggleTitleState,\n//   deleteHendler,\n// }: Props) => {\n//   const dispatch = useDispatch();\n//   let input: any;\n//   const initialvalu = actionArguments ? actionArguments.payload : \"\";\n//   const submitContent = useCallback((e) => {\n//     e.preventDefault();\n//     if (toggleTitleState) toggleTitleState();\n//     if (!input.value.trim()) {\n//       if (deleteHendler) deleteHendler();\n//       return;\n//     }\n//     actionArguments\n//       ? dispatch(action(input.value, actionArguments.id))\n//       : dispatch(action(input.value));\n//     input.value = \"\";\n//   }, []);\n//   return (\n//     <form onSubmit={submitContent}>\n//       <input\n//         placeholder={placeHolder}\n//         ref={(node) => {\n//           input = node;\n//           if (node) node.focus();\n//           if (node) node.value = initialvalu;\n//         }}\n//         onBlur={submitContent}\n//       ></input>\n//     </form>\n//   );\n// };\n\nconst Textinput = () => {\n  /*#__PURE__*/\n  _jsxDEV(Form, {\n    onSubmit: onSubmit,\n    validate: values => {\n      const errors = {};\n\n      if (!values.username) {\n        errors.username = \"Required\";\n      }\n\n      if (!values.password) {\n        errors.password = \"Required\";\n      }\n\n      return errors;\n    },\n    render: ({\n      submitError,\n      handleSubmit,\n      form,\n      submitting,\n      pristine,\n      values\n    }) => /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        name: \"username\",\n        children: ({\n          input,\n          meta\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...input,\n            type: \"text\",\n            placeholder: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), (meta.error || meta.submitError) && meta.touched && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: meta.error || meta.submitError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"password\",\n        children: ({\n          input,\n          meta\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...input,\n            type: \"password\",\n            placeholder: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this), meta.error && meta.touched && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: meta.error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 46\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), submitError && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: submitError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: submitting,\n          children: \"Log In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: form.reset,\n          disabled: submitting || pristine,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(values, 0, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 3\n  }, this);\n};\n\n_c = Textinput;\nexport default _c2 = /*#__PURE__*/memo(Textinput);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Textinput\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/dell304/Selieznov/todo React/react_typescript/src/componenst/TextInput/index.tsx"],"names":["React","memo","Form","Field","Textinput","onSubmit","values","errors","username","password","submitError","handleSubmit","form","submitting","pristine","input","meta","error","touched","reset","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { /* useCallback, */ memo } from \"react\";\n// import { useDispatch } from \"react-redux\";\nimport { Form, Field } from \"react-final-form\";\n\n// interface Props {\n//   placeHolder: string;\n//   action: (...a: any) => { type: string; payload: string; id?: number };\n//   actionArguments?: {\n//     payload: string;\n//     id: number;\n//   };\n//   toggleTitleState?: () => void;\n//   deleteHendler?: () => any;\n// }\n\n// const Textinput = ({\n//   placeHolder,\n//   action,\n//   actionArguments,\n//   toggleTitleState,\n//   deleteHendler,\n// }: Props) => {\n//   const dispatch = useDispatch();\n//   let input: any;\n//   const initialvalu = actionArguments ? actionArguments.payload : \"\";\n\n//   const submitContent = useCallback((e) => {\n//     e.preventDefault();\n//     if (toggleTitleState) toggleTitleState();\n//     if (!input.value.trim()) {\n//       if (deleteHendler) deleteHendler();\n//       return;\n//     }\n//     actionArguments\n//       ? dispatch(action(input.value, actionArguments.id))\n//       : dispatch(action(input.value));\n\n//     input.value = \"\";\n//   }, []);\n\n//   return (\n//     <form onSubmit={submitContent}>\n//       <input\n//         placeholder={placeHolder}\n//         ref={(node) => {\n//           input = node;\n//           if (node) node.focus();\n//           if (node) node.value = initialvalu;\n//         }}\n//         onBlur={submitContent}\n//       ></input>\n//     </form>\n//   );\n// };\nconst Textinput: () => void = () => {\n  <Form\n    onSubmit={onSubmit}\n    validate={(values) => {\n      const errors = {};\n      if (!values.username) {\n        errors.username = \"Required\";\n      }\n      if (!values.password) {\n        errors.password = \"Required\";\n      }\n      return errors;\n    }}\n    render={({\n      submitError,\n      handleSubmit,\n      form,\n      submitting,\n      pristine,\n      values,\n    }) => (\n      <form onSubmit={handleSubmit}>\n        <Field name=\"username\">\n          {({ input, meta }) => (\n            <div>\n              <label>Username</label>\n              <input {...input} type=\"text\" placeholder=\"Username\" />\n              {(meta.error || meta.submitError) && meta.touched && (\n                <span>{meta.error || meta.submitError}</span>\n              )}\n            </div>\n          )}\n        </Field>\n        <Field name=\"password\">\n          {({ input, meta }) => (\n            <div>\n              <label>Password</label>\n              <input {...input} type=\"password\" placeholder=\"Password\" />\n              {meta.error && meta.touched && <span>{meta.error}</span>}\n            </div>\n          )}\n        </Field>\n        {submitError && <div className=\"error\">{submitError}</div>}\n        <div className=\"buttons\">\n          <button type=\"submit\" disabled={submitting}>\n            Log In\n          </button>\n          <button\n            type=\"button\"\n            onClick={form.reset}\n            disabled={submitting || pristine}\n          >\n            Reset\n          </button>\n        </div>\n        <pre>{JSON.stringify(values, 0, 2)}</pre>\n      </form>\n    )}\n  />;\n};\n\nexport default memo(Textinput);\n"]},"metadata":{},"sourceType":"module"}