{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/dell304/Selieznov/todo React/react_typescript/src/componenst/TextInput/index.tsx\";\n// import React, { useCallback, memo } from \"react\";\n// import { useDispatch } from \"react-redux\";\n// interface Props {\n//   placeHolder: string;\n//   action: (...a: any) => { type: string; payload: string; id?: number };\n//   actionArguments?: {\n//     payload: string;\n//     id: number;\n//   };\n//   toggleTitleState?: () => void;\n//   deleteHendler?: () => any;\n// }\n// const Textinput = ({\n//   placeHolder,\n//   action,\n//   actionArguments,\n//   toggleTitleState,\n//   deleteHendler,\n// }: Props) => {\n//   const dispatch = useDispatch();\n//   let input: any;\n//   const initialvalu = actionArguments ? actionArguments.payload : \"\";\n//   const submitContent = useCallback((e) => {\n//     e.preventDefault();\n//     if (toggleTitleState) toggleTitleState();\n//     if (!input.value.trim()) {\n//       if (deleteHendler) deleteHendler();\n//       return;\n//     }\n//     actionArguments\n//       ? dispatch(action(input.value, actionArguments.id))\n//       : dispatch(action(input.value));\n//     input.value = \"\";\n//   }, []);\n//   return (\n//     <form onSubmit={submitContent}>\n//       <input\n//         placeholder={placeHolder}\n//         ref={(node) => {\n//           input = node;\n//           if (node) node.focus();\n//           if (node) node.value = initialvalu;\n//         }}\n//         onBlur={submitContent}\n//       ></input>\n//     </form>\n//   );\n// };\n// export default memo(Textinput);\nimport React from \"react\";\nimport { Form, Field } from \"react-final-form\";\n\nconst TextInput = ({\n  input,\n  meta,\n  ...rest\n}) => /*#__PURE__*/_jsxDEV(\"input\", {\n  type: \"text\",\n  ...input,\n  ...rest\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 80,\n  columnNumber: 19\n}, this);\n\n_c = TextInput;\n\nconst Textinput = ({\n  placeHolder,\n  action,\n  actionArguments,\n  toggleTitleState,\n  deleteHendler\n}) => {\n  const handelOnSubmit = values => {\n    console.log(values);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handelOnSubmit,\n      render: ({\n        handleSubmit,\n        form,\n        submitting,\n        pristine,\n        values\n      }) => /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => (e.preventDefault(), form.reset(), console.log(e.target)),\n        children: /*#__PURE__*/_jsxDEV(Field, {\n          name: \"firstNameUser\",\n          component: TextInput,\n          placeholder: \"First Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n/* (\n  <Form\n    onSubmit={onSubmit}\n    render={({ handleSubmit }) => (\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>First Name</label>\n          <Field<string>\n            name=\"firstName\"\n            component={TextInput}\n            placeholder=\"First Name\"\n          />\n        </div>\n      </form>\n    )}\n  />\n); */\n\n\n_c2 = Textinput;\nexport default Textinput;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TextInput\");\n$RefreshReg$(_c2, \"Textinput\");","map":{"version":3,"sources":["/home/dell304/Selieznov/todo React/react_typescript/src/componenst/TextInput/index.tsx"],"names":["React","Form","Field","TextInput","input","meta","rest","Textinput","placeHolder","action","actionArguments","toggleTitleState","deleteHendler","handelOnSubmit","values","console","log","handleSubmit","form","submitting","pristine","e","preventDefault","reset","target"],"mappings":";;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,kBAA5B;;AAeA,MAAMC,SAA+B,GAAG,CAAC;AACvCC,EAAAA,KADuC;AAEvCC,EAAAA,IAFuC;AAIvC,KAAGC;AAJoC,CAAD,kBAKtB;AAAO,EAAA,IAAI,EAAC,MAAZ;AAAA,KAAuBF,KAAvB;AAAA,KAAkCE;AAAlC;AAAA;AAAA;AAAA;AAAA,QALlB;;KAAMH,S;;AAON,MAAMI,SAAS,GAAG,CAAC;AACjBC,EAAAA,WADiB;AAEjBC,EAAAA,MAFiB;AAGjBC,EAAAA,eAHiB;AAIjBC,EAAAA,gBAJiB;AAKjBC,EAAAA;AALiB,CAAD,KAML;AACX,QAAMC,cAAc,GAAIC,MAAD,IAAiB;AACtCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACD,GAFD;;AAIA,sBACE;AAAA,2BACE,QAAC,IAAD;AACE,MAAA,QAAQ,EAAED,cADZ;AAEE,MAAA,MAAM,EAAE,CAAC;AAAEI,QAAAA,YAAF;AAAgBC,QAAAA,IAAhB;AAAsBC,QAAAA,UAAtB;AAAkCC,QAAAA,QAAlC;AAA4CN,QAAAA;AAA5C,OAAD,kBACN;AACE,QAAA,QAAQ,EAAGO,CAAD,KACRA,CAAC,CAACC,cAAF,IAAoBJ,IAAI,CAACK,KAAL,EAApB,EAAkCR,OAAO,CAACC,GAAR,CAAYK,CAAC,CAACG,MAAd,CAD1B,CADZ;AAAA,+BAKE,QAAC,KAAD;AACE,UAAA,IAAI,EAAC,eADP;AAEE,UAAA,SAAS,EAAErB,SAFb;AAGE,UAAA,WAAW,EAAC;AAHd;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CAxCD;AAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MAzDMI,S;AA0DN,eAAeA,SAAf","sourcesContent":["// import React, { useCallback, memo } from \"react\";\n// import { useDispatch } from \"react-redux\";\n\n// interface Props {\n//   placeHolder: string;\n//   action: (...a: any) => { type: string; payload: string; id?: number };\n//   actionArguments?: {\n//     payload: string;\n//     id: number;\n//   };\n//   toggleTitleState?: () => void;\n//   deleteHendler?: () => any;\n// }\n\n// const Textinput = ({\n//   placeHolder,\n//   action,\n//   actionArguments,\n//   toggleTitleState,\n//   deleteHendler,\n// }: Props) => {\n//   const dispatch = useDispatch();\n//   let input: any;\n//   const initialvalu = actionArguments ? actionArguments.payload : \"\";\n\n//   const submitContent = useCallback((e) => {\n//     e.preventDefault();\n//     if (toggleTitleState) toggleTitleState();\n//     if (!input.value.trim()) {\n//       if (deleteHendler) deleteHendler();\n//       return;\n//     }\n//     actionArguments\n//       ? dispatch(action(input.value, actionArguments.id))\n//       : dispatch(action(input.value));\n\n//     input.value = \"\";\n//   }, []);\n\n//   return (\n//     <form onSubmit={submitContent}>\n//       <input\n//         placeholder={placeHolder}\n//         ref={(node) => {\n//           input = node;\n//           if (node) node.focus();\n//           if (node) node.value = initialvalu;\n//         }}\n//         onBlur={submitContent}\n//       ></input>\n//     </form>\n//   );\n// };\n\n// export default memo(Textinput);\nimport { strict } from \"assert\";\nimport { format } from \"path\";\nimport { stringify } from \"querystring\";\nimport React from \"react\";\nimport { Form, Field } from \"react-final-form\";\nimport { FieldRenderProps } from \"react-final-form\";\n\ninterface Props {\n  placeHolder: string;\n  action: (...a: any) => { type: string; payload: string; id?: number };\n  actionArguments?: {\n    payload: string;\n    id: number;\n  };\n  toggleTitleState?: () => void;\n  deleteHendler?: () => any;\n}\ntype PropsInput = FieldRenderProps<string, any>;\n\nconst TextInput: React.FC<PropsInput> = ({\n  input,\n  meta,\n\n  ...rest\n}: PropsInput) => <input type=\"text\" {...input} {...rest} />;\n\nconst Textinput = ({\n  placeHolder,\n  action,\n  actionArguments,\n  toggleTitleState,\n  deleteHendler,\n}: Props) => {\n  const handelOnSubmit = (values: any) => {\n    console.log(values);\n  };\n\n  return (\n    <div>\n      <Form\n        onSubmit={handelOnSubmit}\n        render={({ handleSubmit, form, submitting, pristine, values }) => (\n          <form\n            onSubmit={(e) => (\n              e.preventDefault(), form.reset(), console.log(e.target)\n            )}\n          >\n            <Field<string>\n              name=\"firstNameUser\"\n              component={TextInput}\n              placeholder=\"First Name\"\n            />\n            {/* <button\n              type=\"button\"\n              onClick={() => {\n                form.reset();\n              }}\n              // disabled={submitting || pristine}\n            >\n              Reset\n            </button> */}\n          </form>\n        )}\n      ></Form>\n    </div>\n  );\n};\n/* (\n  <Form\n    onSubmit={onSubmit}\n    render={({ handleSubmit }) => (\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>First Name</label>\n          <Field<string>\n            name=\"firstName\"\n            component={TextInput}\n            placeholder=\"First Name\"\n          />\n        </div>\n      </form>\n    )}\n  />\n); */\nexport default Textinput;\n"]},"metadata":{},"sourceType":"module"}