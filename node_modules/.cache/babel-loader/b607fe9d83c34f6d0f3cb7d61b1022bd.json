{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dell304/Selieznov/todo React/react_typescript/src/componenst/TextInput/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Form, Field } from \"react-final-form\";\nimport { useDispatch } from \"react-redux\";\nimport { addTodo } from \"../../actions\";\nimport { Input } from \"../Input\";\nimport { ItemInput } from \"../Input\";\nlet state = {\n  data: {\n    title: \"\",\n    titleItem: \"\"\n  }\n};\n\nconst Textinput = ({\n  placeHolder,\n  action,\n  actionArguments,\n  toggleTitleState,\n  deleteHendler\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  state = {\n    data: {\n      title: \"\",\n      titleItem: actionArguments ? actionArguments.payload : \"\"\n    }\n  };\n\n  const handelOnSubmit = values => {\n    console.log(!!values.title.length ? !!values.title.trim() : values.title);\n\n    if (!values.title.length) {// return;\n    }\n\n    if (!!values.titleItem ? !values.titleItem.trim() : true) {\n      if (deleteHendler) deleteHendler();\n    }\n\n    if (actionArguments) {\n      dispatch(action(values.titleItem, actionArguments.id));\n    } else if (values.title.trim() !== \"\") {\n      dispatch(addTodo(values.title));\n    }\n\n    if (toggleTitleState) toggleTitleState();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handelOnSubmit,\n      initialValues: state.data,\n      render: ({\n        form,\n        values\n      }) => /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => (e.preventDefault(e), Object.keys(values).length !== 0 && handelOnSubmit(values), form.reset()),\n        children: !actionArguments ? /*#__PURE__*/_jsxDEV(Field, {\n          name: \"title\",\n          component: Input,\n          placeholder: actionArguments ? \"\" : placeHolder,\n          onBlur: e => (e.preventDefault(e), Object.keys(values).length !== 0 && handelOnSubmit(values), form.reset())\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Field, {\n          name: \"titleItem\",\n          component: ItemInput,\n          placeholder: actionArguments ? \"\" : placeHolder,\n          onBlur: e => (e.preventDefault(e), Object.keys(values).length !== 0 && handelOnSubmit(values), form.reset())\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Textinput, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Textinput;\nexport default Textinput;\n\nvar _c;\n\n$RefreshReg$(_c, \"Textinput\");","map":{"version":3,"sources":["/home/dell304/Selieznov/todo React/react_typescript/src/componenst/TextInput/index.tsx"],"names":["React","Form","Field","useDispatch","addTodo","Input","ItemInput","state","data","title","titleItem","Textinput","placeHolder","action","actionArguments","toggleTitleState","deleteHendler","dispatch","payload","handelOnSubmit","values","console","log","length","trim","id","form","e","preventDefault","Object","keys","reset"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Form, Field } from \"react-final-form\";\nimport { useDispatch } from \"react-redux\";\nimport { addTodo } from \"../../actions\";\nimport { Input } from \"../Input\";\nimport { ItemInput } from \"../Input\";\n\ninterface Props {\n  placeHolder: string;\n  action: (...a: any) => { type: string; payload: string; id?: number };\n  actionArguments?: {\n    payload: string;\n    id: number;\n  };\n  toggleTitleState?: () => void;\n  deleteHendler?: () => any;\n}\nlet state = { data: { title: \"\", titleItem: \"\" } };\nconst Textinput = ({\n  placeHolder,\n  action,\n  actionArguments,\n  toggleTitleState,\n  deleteHendler,\n}: Props) => {\n  const dispatch = useDispatch();\n  state = {\n    data: {\n      title: \"\",\n      titleItem: actionArguments ? actionArguments.payload : \"\",\n    },\n  };\n\n  const handelOnSubmit = (values: any) => {\n    console.log(!!values.title.length ? !!values.title.trim() : values.title);\n\n    if (!values.title.length) {\n      // return;\n    }\n    if (!!values.titleItem ? !values.titleItem.trim() : true) {\n      if (deleteHendler) deleteHendler();\n    }\n    if (actionArguments) {\n      dispatch(action(values.titleItem, actionArguments.id));\n    } else if (values.title.trim() !== \"\") {\n      dispatch(addTodo(values.title));\n    }\n    if (toggleTitleState) toggleTitleState();\n  };\n\n  return (\n    <div>\n      <Form\n        onSubmit={handelOnSubmit}\n        initialValues={state.data}\n        render={({ form, values }) => (\n          <form\n            onSubmit={(e: any) => (\n              e.preventDefault(e),\n              Object.keys(values).length !== 0 && handelOnSubmit(values),\n              form.reset()\n            )}\n          >\n            {!actionArguments ? (\n              <Field<string>\n                name=\"title\"\n                component={Input}\n                placeholder={actionArguments ? \"\" : placeHolder}\n                onBlur={(e: any) => (\n                  e.preventDefault(e),\n                  Object.keys(values).length !== 0 && handelOnSubmit(values),\n                  form.reset()\n                )}\n              />\n            ) : (\n              <Field<string>\n                name=\"titleItem\"\n                component={ItemInput}\n                placeholder={actionArguments ? \"\" : placeHolder}\n                onBlur={(e: any) => (\n                  e.preventDefault(e),\n                  Object.keys(values).length !== 0 && handelOnSubmit(values),\n                  form.reset()\n                )}\n              />\n            )}\n          </form>\n        )}\n      />\n    </div>\n  );\n};\n\nexport default Textinput;\n"]},"metadata":{},"sourceType":"module"}